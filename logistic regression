import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the passenger data
passengers = pd.read_csv('passengers.csv')
#print(passengers.head())

# Update sex column to numerical
passengers['Sex']= passengers['Sex'].map({'male':0, 'female':1})

#print(passengers.head())


# Fill the nan values in the age column
passengers['Age'].fillna(inplace=True, value=passengers['Age'].mean())
#print(passengers)
# Create a first class column
passengers['FirstClass'] = passengers['Pclass'].apply(lambda x: 1 if x ==1 else 0 )



# Create a second class column
passengers['SecondClass']=passengers.Pclass.apply(lambda x: 1 if x == 2 else 0 )

# Select the desired features
features = passengers[['Sex', 'Age', 'FirstClass', 'SecondClass']]
survived= passengers['Survived']

# Perform train, test, split
train_features,test_features,train_labels, test_labels = train_test_split(features, survived)

# Scale the feature data so it has mean = 0 and standard deviation = 1
scaler = StandardScaler()
train_features=scaler.fit_transform(train_features)
test_features=scaler.transform(test_features)

# Create and train the model
model = LogisticRegression()
model.fit(train_features, train_labels)

# Score the model on the train data
scoretraining=model.score(train_features, train_labels)
print(scoretraining)
# Score the model on the test data
scoretesting=model.score(test_features, test_labels)
print(scoretesting)
# Analyze the coefficients
coefficient = model.coef_
print(coefficient)
#sample passengers
Jack = np.array([0.0,20.0,0.0,0.0])
Rose = np.array([1.0,17.0,1.0,0.0])
Me = np.array([0.0,22.0,1.0,0.0])

# Combine passenger arrays
sample_passengers= np.array([Jack, Rose, Me])

# Scale the sample passenger features
sample_passengers= scaler.transform(sample_passengers)

# Make survival predictions!
prediction=model.predict(sample_passengers)
pre = model.predict_proba(sample_passengers)
print(prediction)
print(pre)

#the accuracy on the training data was 0.7874251497005988
#the accuracy on the test data was 0.7713004484304933
# for the sample testing Jack dies, Rose Survived, and I played around a little with my data and found that the first class ticket was an important factor for survival
